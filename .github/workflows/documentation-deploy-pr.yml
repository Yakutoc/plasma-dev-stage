name: Deploy documentations artifacts [PR]

on:
    pull_request:
        branches:
            - dev
            - master

concurrency:
    # New commit on branch cancels running workflows of the same branch
    group: ${{ github.workflow }}-${{ github.head_ref }}
    cancel-in-progress: true

jobs:
    authorize:
        name: Authorize external pull request
        if: ${{ !startsWith(github.head_ref, 'release') }}
        uses: ./.github/workflows/authorize-external-pr.yml

    state:
        name: Handle lerna changed state
        needs: [authorize]
        uses: ./.github/workflows/change-detection.yml
        with:
            ref: refs/pull/${{github.event.pull_request.number}}/merge
        secrets: inherit

    deploy-website:
        name: Deploy website artifacts
        needs: [ state ]
        if: ${{ fromJSON(needs.state.outputs.STATE).HAS_PACKAGES_DS_CHANGES }}

        runs-on: ubuntu-latest
        env:
            PR_NAME: pr-${{ github.event.number }}
            PREFIX: pr/pr-${{ github.event.number }}
        steps:
            -   uses: actions/checkout@v4
                with:
                    show-progress: false

            -   uses: dorny/paths-filter@v3
                id: changes
                with:
                    filters: |
                        website:
                          - 'website/plasma-website/**'
            -   name: Set env
                run: |
                    is_opened=${{ github.event.action == 'opened' }}
                    has_changes=${{ github.event.action == 'synchronize' && steps.changes.outputs.website == 'true' }}
                    echo "HAS_CHANGES=${{ is_opened == 'true' || has_changes == 'true' }}" >> $GITHUB_ENV

            -   name: Prepare environment
                if: ${{ fromJSON(env.HAS_CHANGES) }}
                uses: ./.github/actions/prepare-environment

            -   name: Lerna bootstrap
                if: ${{ fromJSON(env.HAS_CHANGES) }}
                run: npx lerna bootstrap --scope="@salutejs/plasma-{website,icons}"

            -   name: Prepare directory
                run: |
                    mkdir -p s3_build/${PR_NAME}
                    echo "${{ github.event.action }}"

                # TODO: https://github.com/salute-developers/plasma/issues/603
            -   name: Plasma Website
                if: ${{ fromJSON(env.HAS_CHANGES) }}
                run: |
                    export NODE_OPTIONS=--openssl-legacy-provider
                    npm run build --prefix="./website/plasma-website"
                    cp -R ./website/plasma-website/build/. ./s3_build/${PR_NAME}

            -   name: Install s3cmd
                if: ${{ fromJSON(env.HAS_CHANGES)}}
                run: pip3 install s3cmd

            -   name: s3 Upload
                if: ${{ fromJSON(env.HAS_CHANGES) }}
                run: >
                    s3cmd
                    --access_key ${{ secrets.AWS_ACCESS_KEY_ID }}
                    --secret_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    --host ${{ secrets.AWS_ENDPOINT }}
                    --host-bucket ${{ secrets.AWS_ENDPOINT }}
                    --bucket-location ${{ secrets.AWS_REGION }}
                    --signature-v2
                    --delete-removed
                    --no-mime-magic
                    sync
                    ./s3_build/${PR_NAME}/
                    s3://${{ secrets.AWS_S3_BUCKET_2 }}/pr/${PR_NAME}/

    deploy-artifacts:
        name: Deploy artifacts
        needs: [ state,deploy-website ]
        runs-on: ubuntu-latest
        env:
            PR_NAME: pr-${{ github.event.number }}
            PREFIX: pr/pr-${{ github.event.number }}
        strategy:
            fail-fast: false
            matrix:
                package: ${{ fromJson(needs.state.outputs.STATE).PACKAGES_DOCUMENTATIONS_RUN }}
        steps:
            -   uses: actions/checkout@v4
                with:
                    show-progress: false

            -   name: Prepare environment
                uses: ./.github/actions/prepare-environment

            -   name: Set job environment variables
                run: |
                    echo "SHORT_NAME=$(echo ${{ matrix.package }} | sed -r 's/@salutejs\///g' | sed -r 's/plasma-//g')" >> $GITHUB_ENV
                    echo "HAS_PACKAGE_DOCS=$([ -d "./website/${{ matrix.package }}-docs" ] && echo true || echo false)" >> $GITHUB_ENV

            -   name: Get lerna scope
                id: lerna-scope
                uses: actions/github-script@v7
                env:
                    PROCESSED_DATA: ${{ toJSON(fromJson(needs.state.outputs.STATE).PROCESSED_DATA) }}
                    PACKAGE: ${{ matrix.package }}
                with:
                    result-encoding: string
                    script: |
                        const { PROCESSED_DATA, PACKAGE, HAS_PACKAGE_DOCS } = process.env;

                        const processedData = JSON.parse(PROCESSED_DATA);

                        const [scopeDSName] = PACKAGE.split('-');

                        // INFO: Пока нет устойчивого правила для формирования пакетов `themes`
                        // и где то используется одно слово, типа `plasma`, а где-то два `caldera-online`
                        const themes = ['caldera-online'].includes(PACKAGE) ? `${PACKAGE}-themes` : `${scopeDSName}-themes`;

                        const packages = [
                          'plasma-hope',
                          'plasma-tokens',
                          'plasma-tokens-native',
                          'plasma-tokens-utils',
                          'plasma-typo',
                          themes,
                          `${PACKAGE}-docs`,
                        ];

                        // INFO: Пока не починили медленный css build for b2c/web
                        // нужно принудительно ставить и plasma-new-hope
                        const result = [
                            ...processedData.filter((package) => packages.includes(package)),
                            PACKAGE,
                            'plasma-core',
                            'plasma-new-hope',
                            'plasma-docs-ui',
                            'plasma-icons',
                        ];

                        if (result.includes('plasma-tokens-native')) {
                            result.push('plasma-tokens');
                            result.push('plasma-tokens-utils');
                        }

                        if (result.includes(themes)) {
                            result.push('plasma-typo');
                            result.push('data-themes');
                        }

                        console.log('Result =>', result);

                        return result.length > 1 ? `@salutejs/{${result.join(',')}}` : `@salutejs/${result[0]}`;

            -   name: Lerna bootstrap
                run: npx lerna bootstrap --scope="${{ steps.lerna-scope.outputs.result }}"

            -   name: Prepare directory
                run: mkdir -p s3_build/${PR_NAME}

            -   name: Build documentation - "${{ matrix.package }}"
                if: ${{ fromJSON(env.HAS_PACKAGE_DOCS) }}
                run: |
                    npm run build --prefix="./website/${{ matrix.package }}-docs" -- --no-minify
                    cp -R ./website/${{ matrix.package }}-docs/build ./s3_build/${PR_NAME}/${{ env.SHORT_NAME }}

            -   name: Build storybook - "${{ matrix.package }}"
                run: |
                    npm run storybook:build --prefix="./packages/${{ matrix.package }}"
                    cp -R ./packages/${{ matrix.package }}/build-sb ./s3_build/${PR_NAME}/${{ env.SHORT_NAME }}-storybook

            -   name: Install s3cmd
                run: pip3 install s3cmd

            -   name: s3 upload docs
                if: ${{ fromJSON(env.HAS_PACKAGE_DOCS) }}
                run: >
                    s3cmd
                    --access_key ${{ secrets.AWS_ACCESS_KEY_ID }}
                    --secret_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    --host ${{ secrets.AWS_ENDPOINT }}
                    --host-bucket ${{ secrets.AWS_ENDPOINT }}
                    --bucket-location ${{ secrets.AWS_REGION }}
                    --signature-v2
                    --delete-removed
                    --no-mime-magic
                    sync
                    ./s3_build/${PR_NAME}/${{ env.SHORT_NAME }}/
                    s3://${{ secrets.AWS_S3_BUCKET_2 }}/pr/${PR_NAME}/${{ env.SHORT_NAME }}/

            -   name: s3 upload storybook
                run: >
                    s3cmd
                    --access_key ${{ secrets.AWS_ACCESS_KEY_ID }}
                    --secret_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    --host ${{ secrets.AWS_ENDPOINT }}
                    --host-bucket ${{ secrets.AWS_ENDPOINT }}
                    --bucket-location ${{ secrets.AWS_REGION }}
                    --signature-v2
                    --delete-removed
                    --no-mime-magic
                    sync
                    ./s3_build/${PR_NAME}/${{ env.SHORT_NAME }}-storybook/
                    s3://${{ secrets.AWS_S3_BUCKET_2 }}/pr/${PR_NAME}/${{ env.SHORT_NAME }}-storybook/

    attache-comment:
        name: Attached comment
        needs: [ state, deploy-artifacts ]
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4
                with:
                    show-progress: false

            -   name: Create comment
                id: comment-link
                uses: actions/github-script@v7
                env:
                    PACKAGES_DS: ${{ toJSON(fromJSON(needs.state.outputs.STATE).PACKAGES_DOCUMENTATIONS_RUN) }}
                    BASE_URL: ${{ vars.STAGE_STABLE_URL }}/pr/pr-${{ github.event.number }}
                with:
                    result-encoding: string
                    script: |
                        const createSBLinks = require('./.github/create-storybook-links.js');

                        return createSBLinks();

            -   name: Attach comment
                uses: marocchino/sticky-pull-request-comment@v2
                with:
                    message: ${{ steps.comment-link.outputs.result }}
